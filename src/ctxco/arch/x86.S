/*
            Copyright Oliver Kowalke 2009.
   Distributed under the Boost Software License, Version 1.0.
      (See accompanying file LICENSE_1_0.txt or copy at
            http://www.boost.org/LICENSE_1_0.txt)
*/

/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/* make context (refer to boost.context)
 *
 *
 *             -----------------------------------------------------------------------------------------
 * stackdata: |                                                          |         context        |||||||
 *             -----------------------------------------------------------------------------------|-----
 *                                                                                           (16-align)
 *
 *
 *                                    func      __end   __entry                  from
 *             -----------------------------------------------------------------------------------------
 * context:   |   edi   |   esi   |   ebx   |   ebp   |   eip   | retval | context |  priv  |  padding  |
 *             -----------------------------------------------------------------------------------------
 *            0         4         8         12        16        20        24    arguments
 *                                                              |         |
 *                                                              |      16-align
 *                                                              |
 *                                                   esp when jump to function
 *
 * @param stackdata     the stack data (esp + 4)
 * @param stacksize     the stack size (esp + 8)
 * @param func          the entry function (esp + 12)
 *
 * @return              the context pointer (eax)
 */
.text
.align  4
.global getctx
.type   getctx, %function
.hidden getctx
getctx:
    // save the stack top to eax
    movl 4(%esp), %eax
    addl 8(%esp), %eax
    // reserve space for first argument(from) of context-function
    leal -8(%eax), %eax
    // 16-align of the stack top address for macosx
    andl $-16, %eax
    // reserve space for context-data on context-stack
    leal -24(%eax), %eax
    // context.ebx = func
    movl 12(%esp), %edx
    movl %edx, 8(%eax)
    // init retval = a writeable space (context)
    movl %eax, 20(%eax)
    // context.eip = the address of label __entry
    call 1f
1:  popl %ecx
    addl $__entry - 1b, %ecx
    movl %ecx, 16(%eax)
    // context.ebp = the address of label __end
    call 2f
2:  popl %ecx
    addl $__end - 2b, %ecx
    movl %ecx, 12(%eax)
    // return the context pointer
    ret
__entry:
    // pass arguments(context: eax, priv: edx) to the context function
    movl %eax, (%esp)
    movl %edx, 0x4(%esp)
    // retval = the address of label __end
    pushl %ebp
    // jump to the context function entry
    jmp *%ebx
__end:
    // exit(0)
    xorl  %eax, %eax
    movl  %eax, (%esp)
    call  _exit@PLT
    hlt

/* jump context (refer to boost.context)
 *
 * @code
 *
 * subl $4, %esp  <---- padding (need ret $4)
 * pushl priv
 * pushl context
 * pushl retval
 * call tb_context_jump
 * addl $12, %esp
 *
 * tb_context_jump():
 *     ret 4
 *
 * @endcode
 *
 * @param retval        the from-context (esp + 4)
 * @param context       the to-context (esp + 8)
 * @param priv          the passed user private data (esp + 12)
 *
 * @return              the from-context (retval (esp + 4))
 */
.text
.align  8
.global setctx
.type   setctx, %function
.hidden setctx
setctx:
    // save registers and construct the current context
    pushl %ebp
    pushl %ebx
    pushl %esi
    pushl %edi
    // save the old context(esp) to eax
    movl %esp, %eax
    // ecx = argument(context)
    movl 24(%esp), %ecx
    // edx = argument(priv)
    movl 28(%esp), %edx
    // switch to the new context(esp) and stack
    movl %ecx, %esp
    // restore registers of the new context
    popl %edi
    popl %esi
    popl %ebx
    popl %ebp
    // return from-context(retval: [to_esp + 4](context: eax, priv: edx)) from jump
    movl 4(%esp), %ecx
    movl %eax, (%ecx)
    movl %edx, 4(%ecx)
    // jump to the return or entry address(eip)
    ret $4